
(function(){

const protocol = 'web+did:';
const blockedOrigins = {};

class ProtocolChannel {
  constructor(protocol, options = {}){
    this.handlers = {};
    this.blocked = {};
    this.transactions = {};
    if (options.block) this.blockOrigins(options.block);
    this.connect = self === top ? new Promise((resolve, reject) => {
        let frame = this.frame = document.createElement('iframe');
            frame.src = protocol;
            frame.addEventListener('load', e => {
              resolve(frame.contentWindow.postMessage);
            }, { once: true });
        addEventListener('message', e => {
          if (e.source === frame.contentWindow) {
            this.handleMessage(JSON.parse(e.data));
          }
        })
        document.documentElement.appendChild(frame);
      }) :
      new Promise((resolve, reject) => {
        addEventListener('message', e => {
          console.log(e);
          if (e.source === top || e.origin === document.referrer || !blockedOrigins[e.origin]) {
            handleMessage(e);
          }
        });
        resolve(top.postMessage, document.referrer)
      });
  }
  sendMessage(message, options = {}){
    let channel = this;
    return new Promise(function (resolve) {
      channel.connect.then((postMessage, origin = '*') => {
        this.transaction = channel.transactions[crypto.getRandomValues(new Uint8Array(16)).join('')] = {
          message: message,
          resolve: resolve
        }
        postMessage(message, origin);
      })
    })
  }
  handleMessage(message){
    let txn = transactions[message.id];
    if (txn) txn.resolve(message);
    else {
      let handler = this.handlers[message.type];
      if (handler) handler(message);
    }
  }
  addMessageHandlers(obj){
    this.handlers = Object.assign(this.handlers, obj);
  }
  removeMessageHandlers(keys){
    keys.forEach(handler => delete this.handlers[handler])
  }
  blockOrigins(origins){
    origins.forEach(origin => this.blocked[origin] = true)
  }
  unblockOrigins(origins){
    origins.forEach(origin => delete this.blocked[origin])
  }
}

if (self === top) {
  connect = new Promise((resolve, reject) => {
    let frame = document.createElement('iframe');
        frame.src = protocol;
        frame.addEventListener('load', e => {
          resolve(frame.contentWindow.postMessage);
        }, { once: true });
    addEventListener('message', e => {
      console.log(e);
      handleMessage(e);
    })
    document.documentElement.appendChild(frame);
  })
  
  sendMessage('["site connecting"]');

}

else if (self !== top && top === parent) {
  connect = Promise.resolve(top.postMessage, document.referrer);
  addEventListener('message', e => {
    console.log(e);
    if (e.source === top || e.origin === document.referrer || !blockedOrigins[e.origin]) {
      handleMessage(e);
    }
  });
  
  sendMessage('["wallet connecting"]');


}

    
})()